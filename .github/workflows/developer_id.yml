name: Developer Id Build

on:
  push:
    branches:
      - developer_id
  pull_request:

jobs:
  test:
    runs-on: macos-14

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install the Apple certificate
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
      - name: Select Xcode
        run: |
          sudo xcode-select -s /Applications/Xcode_15.4.app
      - name: Build App
        run: |
          OUTPUT_DIR=$RUNNER_TEMP/output
          mkdir -p $OUTPUT_DIR
          xcodebuild build -scheme Xcodes -project Xcodes.xcodeproj -configuration Release -destination 'generic/platform=macOS' BUILD_DIR=$OUTPUT_DIR
      - name: Codesign app bundle
        env:
          MACOS_CERTIFICATE: ${{ secrets.PROD_MACOS_CERTIFICATE }}
          MACOS_CERTIFICATE_PWD: ${{ secrets.P12_PASSWORD }}
          MACOS_CERTIFICATE_NAME: ${{ secrets.PROD_MACOS_CERTIFICATE_NAME }}
          MACOS_CI_KEYCHAIN_PWD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          PROD_CERTIFICATE_PATH=$RUNNER_TEMP/prod_certificate.p12
          PROD_KEYCHAIN_PATH=$RUNNER_TEMP/prod-signing.keychain-db

          # Turn our base64-encoded certificate back to a regular .p12 file

          echo $MACOS_CERTIFICATE | base64 --decode -o $PROD_CERTIFICATE_PATH

          # We need to create a new keychain, otherwise using the certificate will prompt
          # with a UI dialog asking for the certificate password, which we can't
          # use in a headless CI environment

          security create-keychain -p "$MACOS_CI_KEYCHAIN_PWD" $PROD_KEYCHAIN_PATH
          security default-keychain -s $PROD_KEYCHAIN_PATH
          security unlock-keychain -p "$MACOS_CI_KEYCHAIN_PWD" $PROD_KEYCHAIN_PATH
          security import certificate.p12 -k $PROD_KEYCHAIN_PATH -P "$MACOS_CERTIFICATE_PWD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$MACOS_CI_KEYCHAIN_PWD" $PROD_KEYCHAIN_PATH

          # We finally codesign our app bundle, specifying the Hardened runtime option

          /usr/bin/codesign --force -s "$MACOS_CERTIFICATE_NAME" --options runtime $OUTPUT_DIR/Release/Xcodes.app -v
      - name: Notarize app bundle
        env:
          PROD_MACOS_NOTARIZATION_APPLE_ID: ${{ secrets.PROD_MACOS_NOTARIZATION_APPLE_ID }}
          PROD_MACOS_NOTARIZATION_TEAM_ID: ${{ secrets.PROD_MACOS_NOTARIZATION_TEAM_ID }}
          PROD_MACOS_NOTARIZATION_PWD: ${{ secrets.PROD_MACOS_NOTARIZATION_PWD }}
        run: |
          # Store the notarization credentials so that we can prevent a UI password dialog
          # from blocking the CI

          echo "Create keychain profile"
          xcrun notarytool store-credentials "notarytool-profile" --apple-id "$PROD_MACOS_NOTARIZATION_APPLE_ID" --team-id "$PROD_MACOS_NOTARIZATION_TEAM_ID" --password "$PROD_MACOS_NOTARIZATION_PWD"

          # We can't notarize an app bundle directly, but we need to compress it as an archive.
          # Therefore, we create a zip file containing our app bundle, so that we can send it to the
          # notarization service

          echo "Creating temp notarization archive"
          ditto -c -k --keepParent $OUTPUT_DIR/Release/Xcodes.app "notarization.zip"

          # Here we send the notarization request to the Apple's Notarization service, waiting for the result.
          # This typically takes a few seconds inside a CI environment, but it might take more depending on the App
          # characteristics. Visit the Notarization docs for more information and strategies on how to optimize it if
          # you're curious

          echo "Notarize app"
          xcrun notarytool submit "notarization.zip" --keychain-profile "notarytool-profile" --wait

          # Finally, we need to "attach the staple" to our executable, which will allow our app to be
          # validated by macOS even when an internet connection is not available.
          echo "Attach staple"
          xcrun stapler staple $OUTPUT_DIR/Release/Xcodes.app
      - name: Create the DMG file
        run: |
          hdiutil create -format UDZO -srcfolder $OUTPUT_DIR/Release/Xcodes.app $OUTPUT_DIR/Xcodes.dmg
      - name: Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: Xcodes.dmg
          path: $OUTPUT_DIR/Xcodes.dmg
